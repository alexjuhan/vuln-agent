class VulnerabilityAnalysisChain:
    async def analyze_vulnerability(self, finding: Finding) -> Analysis:
        # 1. Get source code context
        context = await self.tools.vector_db.query_similar_code(finding.code_snippet)
        
        # 2. Check CVE database
        cve_info = await self.tools.cve_lookup.search(
            finding.vulnerability_type,
            finding.affected_package
        )
        
        # 3. Generate LLM analysis
        analysis_prompt = f"""
        Analyze this security finding:
        
        Code: {finding.code_snippet}
        Tool: {finding.source_tool}
        Type: {finding.vulnerability_type}
        
        Similar patterns in codebase:
        {context}
        
        Related CVEs:
        {cve_info}
        
        Provide:
        1. Likelihood of false positive
        2. Exploitability assessment
        3. Impact analysis
        4. Recommended priority (Critical/High/Medium/Low)
        5. Specific remediation steps
        """
        
        return await self.llm.analyze(analysis_prompt) 