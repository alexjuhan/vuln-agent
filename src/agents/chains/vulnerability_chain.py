class VulnerabilityAnalysisChain:
    async def analyze_vulnerability(self, finding: Finding) -> Analysis:
        # 1. Get source code context
        context = await self.tools.vector_db.query_similar_code(finding.code_snippet)
        
        # 2. Check CVE database
        cve_info = await self.tools.cve_lookup.search(
            finding.vulnerability_type,
            finding.affected_package
        )
        
        # 3. Generate LLM analysis with improved prompt aligned with system goals
        analysis_prompt = f"""
        As an expert security researcher, analyze this security finding in the context of the codebase:
        
        Finding Details:
        - Code: {finding.code_snippet}
        - Detection Tool: {finding.source_tool}
        - Vulnerability Type: {finding.vulnerability_type}
        - Affected Package: {finding.affected_package}
        
        Context:
        - Similar Code Patterns: {context}
        - Related CVEs: {cve_info}
        - OWASP Category: {self._map_to_owasp(finding.vulnerability_type)}
        
        Provide a detailed analysis following these criteria:
        1. False Positive Assessment:
           - Analyze the code context and pattern matching accuracy
           - Consider architectural context and dependencies
        
        2. Exploitability Analysis:
           - Required attack prerequisites
           - Technical complexity
           - Authentication/authorization barriers
        
        3. Impact Assessment:
           - Potential business impact
           - Data sensitivity concerns
           - System compromise scope
        
        4. Risk-Based Priority:
           - Assign Critical/High/Medium/Low with justification
           - Consider both exploitability and impact
        
        5. Remediation Plan:
           - Specific code-level fixes
           - Security best practices
           - Reference to OWASP guidelines
        """
        
        return await self.llm.analyze(analysis_prompt)

    def _map_to_owasp(self, vulnerability_type: str) -> str:
        # Helper method to map vulnerability types to OWASP categories
        owasp_mapping = {
            "sql_injection": "A03:2021-Injection",
            "xss": "A03:2021-Injection",
            "path_traversal": "A01:2021-Broken Access Control",
            # Add more mappings as needed
        }
        return owasp_mapping.get(vulnerability_type.lower(), "Unknown") 