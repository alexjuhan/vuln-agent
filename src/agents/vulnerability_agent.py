import asyncio
from .base_agent import BaseSecurityAgent
from tools.codeql.codeql_tool import CodeQLTool
from .discovery_agent import DiscoveryAgent

class VulnerabilityAnalysisAgent(BaseSecurityAgent):
    def __init__(self):
        tools = [
            CodeQLTool(),
            SemgrepTool(),
            DependencyCheckTool(),
            VectorDBTool(),
            CVELookupTool(),
            DataFlowAnalyzerTool()
        ]
        super().__init__(llm_config=AGENT_CONFIG, tools=tools)
        
    async def analyze_codebase(self, repo_path: str) -> SecurityReport:
        # First, run discovery
        discovery_agent = DiscoveryAgent(self.llm_config, [])
        project_context = await discovery_agent.analyze_project(repo_path)
        
        # Use discovery results to configure analysis
        test_plan = project_context.test_coverage
        selected_tools = await self._configure_tools(test_plan)
        
        # Run analysis according to the test plan
        results = await self._execute_test_plan(
            selected_tools, 
            project_context,
            test_plan
        )
        
        return SecurityReport(
            findings=results,
            context=project_context,
            metadata=self._generate_metadata()
        )
