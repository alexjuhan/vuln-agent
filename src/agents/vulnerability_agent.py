import asyncio
from .base_agent import BaseSecurityAgent
from tools.codeql.codeql_tool import CodeQLTool

class VulnerabilityAnalysisAgent(BaseSecurityAgent):
    def __init__(self):
        tools = [
            CodeQLTool(),
            SemgrepTool(),
            DependencyCheckTool(),
            VectorDBTool(),
            CVELookupTool(),
            DataFlowAnalyzerTool()
        ]
        super().__init__(llm_config=AGENT_CONFIG, tools=tools)
        
    async def analyze_codebase(self, repo_path: str) -> SecurityReport:
        """Enhanced codebase analysis"""
        # Initialize analysis context
        self.context = await self._build_analysis_context(repo_path)
        
        # Run parallel analysis
        results = await asyncio.gather(
            self._run_sast_analysis(),
            self._run_dependency_analysis(),
            self._run_pattern_analysis()
        )
        
        # Combine and triage results
        findings = self._combine_results(results)
        triaged_findings = await self.triage_agent.analyze_findings(findings)
        
        return SecurityReport(
            findings=triaged_findings,
            context=self.context,
            metadata=self._generate_metadata()
        )
